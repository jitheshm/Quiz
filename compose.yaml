version: "3.8"

services:
  mongo:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27018:27017
    volumes:
      - quiz:/data/db
    networks:
      - quiz-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - quiz-network
    depends_on:
      - mongo

  rabbitmq:
    image: "rabbitmq:latest"
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    # environment:
    #   RABBITMQ_DEFAULT_USER: user
    #   RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - quiz-network

  userauthservice:
    build: ./backend/services/userAuthService
    container_name: user-auth-service
    restart: unless-stopped
    env_file:
      - ./backend/services/userAuthService/.env
    ports:
      - 3000:3000
    networks: 
      - quiz-network
    develop:
      watch:
        - action: sync
          path: ./backend/services/userAuthService
          target: /app/
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/services/userAuthService/package.json
    depends_on:
      - mongo
      - rabbitmq

  quizservice:
    build: ./backend/services/quizService
    container_name: quiz-service
    restart: unless-stopped
    env_file:
      - ./backend/services/quizService/.env
    ports:
      - 3001:3001
    networks: 
      - quiz-network
    develop:
      watch:
        - action: sync
          path: ./backend/services/quizService
          target: /app/
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/services/quizService/package.json
    depends_on:
      - mongo
      - rabbitmq

  scoreservice:
    build: ./backend/services/scoreService
    container_name: score-service
    restart: unless-stopped
    env_file:
      - ./backend/services/scoreService/.env
    ports:
      - 3002:3002
    networks: 
      - quiz-network
    develop:
      watch:
        - action: sync
          path: ./backend/services/scoreService
          target: /app/
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/services/scoreService/package.json
    depends_on:
      - mongo
      - rabbitmq

  notificationservice:
    build: ./backend/services/notificationService
    container_name: notification-service
    restart: unless-stopped
    env_file:
      - ./backend/services/notificationService/.env
    ports:
      - 3003:3003
    networks: 
      - quiz-network
    develop:
      watch:
        - action: sync
          path: ./backend/services/notificationService
          target: /app/
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/services/notificationService/package.json
    depends_on:
      - mongo
      - rabbitmq


  nginx:
    build: ./backend/gateway
    container_name: nginx
    ports:
      - 8000:80
    networks:
      - quiz-network
    depends_on:
      - userauthservice
      - quizservice
      - scoreservice





volumes:
  quiz:


networks:
  quiz-network:
    driver: bridge
